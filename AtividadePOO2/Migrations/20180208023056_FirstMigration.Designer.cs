// <auto-generated />
using AtividadePOO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace AtividadePOO2.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180208023056_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AtividadePOO.Models.Agencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BancoId");

                    b.Property<string>("Cidade");

                    b.Property<string>("Nome");

                    b.Property<string>("Numero");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.ToTable("Agencias");
                });

            modelBuilder.Entity("AtividadePOO.Models.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("AtividadePOO.Models.Conta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgenciaId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Numero");

                    b.HasKey("Id");

                    b.HasIndex("AgenciaId");

                    b.HasIndex("Numero")
                        .IsUnique()
                        .HasFilter("[Numero] IS NOT NULL");

                    b.ToTable("Contas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Conta");
                });

            modelBuilder.Entity("AtividadePOO.Models.ContaTitular", b =>
                {
                    b.Property<int>("ContaId");

                    b.Property<int>("TitularId");

                    b.HasKey("ContaId", "TitularId");

                    b.HasIndex("TitularId");

                    b.ToTable("ContasTitular");
                });

            modelBuilder.Entity("AtividadePOO.Models.Titular", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cpf");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasFilter("[Cpf] IS NOT NULL");

                    b.ToTable("Titular");
                });

            modelBuilder.Entity("AtividadePOO.Models.ContaConrrente", b =>
                {
                    b.HasBaseType("AtividadePOO.Models.Conta");

                    b.Property<float>("SaldoCorrente");

                    b.ToTable("ContaConrrente");

                    b.HasDiscriminator().HasValue("ContaConrrente");
                });

            modelBuilder.Entity("AtividadePOO.Models.ContaPoupanca", b =>
                {
                    b.HasBaseType("AtividadePOO.Models.Conta");

                    b.Property<DateTime>("DataAniversario");

                    b.Property<float>("Juros");

                    b.Property<float>("SaldoPoupanca");

                    b.Property<int>("Variacao");

                    b.ToTable("ContaPoupanca");

                    b.HasDiscriminator().HasValue("ContaPoupanca");
                });

            modelBuilder.Entity("AtividadePOO.Models.Agencia", b =>
                {
                    b.HasOne("AtividadePOO.Models.Banco", "Banco")
                        .WithMany("Agencias")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtividadePOO.Models.Conta", b =>
                {
                    b.HasOne("AtividadePOO.Models.Agencia", "Agencia")
                        .WithMany("Contas")
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtividadePOO.Models.ContaTitular", b =>
                {
                    b.HasOne("AtividadePOO.Models.Conta", "Conta")
                        .WithMany("Titulares")
                        .HasForeignKey("ContaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtividadePOO.Models.Titular", "Titular")
                        .WithMany("Contas")
                        .HasForeignKey("TitularId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
